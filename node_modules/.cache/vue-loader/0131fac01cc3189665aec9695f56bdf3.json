{"remainingRequest":"/home/nico/Rendu/post-it/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/nico/Rendu/post-it/src/components/Notes.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/nico/Rendu/post-it/src/components/Notes.vue","mtime":1605774085440},{"path":"/home/nico/Rendu/post-it/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nico/Rendu/post-it/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/nico/Rendu/post-it/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/nico/Rendu/post-it/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nico/Rendu/post-it/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmxpc3Qtbm90ZSB7CiAgICBvdmVyZmxvdy14OiBzY3JvbGw7Cn0KLm5vdGUtYmxvY2sgewogICAgd2lkdGg6IDMwMHB4OwogICAgYm9yZGVyOiAxcHggc29saWQgIzgxODE4MTsKICAgIG1hcmdpbjogMTBweDsKICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgICBwYWRkaW5nOiAxMHB4OwogICAgb3BhY2l0eTogODAlOwp9Ci5ub3RlIHsKICAgIG1hcmdpbjogMTBweCAwcHg7CiAgICBib3JkZXI6IDFweCBzb2xpZCAjODE4MTgxOwogICAgYm9yZGVyLXJhZGl1czogMTBweDsKICAgIHBhZGRpbmc6IDVweDsKICAgIHJlc2l6ZTogbm9uZTsKICAgIG92ZXJmbG93OiBoaWRkZW47Cn0KLmFkZCB7CiAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICBib3JkZXI6IDJweCBkb3R0ZWQgIzgxODE4MTsKfQouYWRkLXRleHQgewogICAgd2lkdGg6IDMwMHB4Owp9CmgyIGlucHV0ewogICAgd2lkdGg6IDEwMCU7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKICAgIGJvcmRlcjogbm9uZTsKfQpoMiB7CiAgICB0ZXh0LWFsaWduOiBsZWZ0Owp9Cgo="},{"version":3,"sources":["Notes.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Notes.vue","sourceRoot":"src/components","sourcesContent":["<script>\n\nimport Note from '@/components/Note'\n\nexport default {\n    name: 'Notes',\n    data() {\n        return {\n            notes: [\n                {id: 0, title: 'Design', backcolor: '#92c6db', text: [\n                    'test', \n                    'dfgsdfhfghfdgh',\n                    'zerazerazerzer',\n                    'zersdfgsdfgsdfg'\n                ]},\n                {id: 1, title: 'Prototype', backcolor: '#92dbb3', text: [\n                    'azerzaefeaz joezaij sfdqkj qsmdjfk qsmldjkql skfjqlsmfj kqslkfjqslkdj qslkdf s', \n                ]},\n                {id: 2, title: 'Test', backcolor: '#dadb92', text: [\n                    'dsfsfd', \n                    'gddsdgsdgsdfg', \n                    'erzfsdfg'\n                ]},\n                {id: 3, title: 'Final', backcolor: '#dbad92', text: [\n                    'sfsdfds', \n                    'ksdfklsmfd'\n                ]}\n            ], \n            loaded: false\n        }\n    }, \n    methods: {\n        addEntry: function(id) {\n            let newValue = this.getStorage();\n            for(let i = 0; i < newValue.length; i++){\n                if(newValue[i].id == id) {\n                    newValue[i]['text'].push('New note');\n                }\n            }\n            window.localStorage.setItem('notes', JSON.stringify(newValue));\n            this.$forceUpdate();\n        }, \n        newNote: function() {\n            let color1 = Math.floor(Math.random() * Math.floor(256));\n            let color2 = Math.floor(Math.random() * Math.floor(256));\n            let color3 = Math.floor(Math.random() * Math.floor(256));\n            let randomColor = 'rgb(' + color1 +', ' + color2 + ', ' + color3 +')';\n            let newValue = this.getStorage();\n            \n            let newId = newValue[newValue.length-1].id + 1;\n            newValue.push({id: newId, title: 'New note - ' + newId, backcolor: randomColor, text: [\n                  'New note'\n              ]});\n            window.localStorage.setItem('notes', JSON.stringify(newValue));\n            this.$forceUpdate();\n\n        }, \n        store: function() {\n            let array = [];\n            for(let i = 0; i < this.notes.length; i++) {\n                array.push(this.notes[i]);\n            }\n            window.localStorage.setItem('notes', JSON.stringify(array));\n\n        }, \n        update: function(id, index, className) {\n            var selector = '';\n            if(className == \"main\") {\n                selector = '#note-block' + id + ' #textArea' +index;\n            } else {\n                selector = '#note' + index + ' #textAreaDialog' + index;\n            }\n            const textarea = document.querySelector(selector);\n            let newValue = this.getStorage();\n            for(let i = 0; i < newValue.length; i++){\n                if(newValue[i].id == id) {\n                    newValue[i]['text'][index] = textarea.value;\n                }\n            }\n            window.localStorage.setItem('notes', JSON.stringify(newValue));\n        }, \n        updateTitle: function(id, className) {\n            let prefixe = '';\n            if(className == \"main\") {\n                prefixe = '#h2-';\n            } else {\n                prefixe = '#h2_';\n            }\n            const textarea = document.querySelector(prefixe + id);\n            let newValue = this.getStorage();\n            for(let i = 0; i < newValue.length; i++){\n                if(newValue[i].id == id) {\n                    newValue[i]['title'] = textarea.value;\n                }\n            }\n            window.localStorage.setItem('notes', JSON.stringify(newValue));\n        }, \n        textAreaResize: function(block, textArea) {\n            const element = document.querySelector('#' + block + ' #' + textArea);\n            element.style.height = '1px';\n            element.style.height = (10 + element.scrollHeight) + 'px';\n        }, \n        getStorage: function() {\n            let storage = window.localStorage;\n            return JSON.parse(storage['notes']);\n         }\n    },\n    components: {\n        Note\n    }, \n    mounted() {this.loaded = true}\n}\n\n</script>\n\n<template>\n\n        <div class=\"p-3 d-flex list-note\">\n            <!-- {{store()}}  -->\n            <div class=\"d-flex\" v-for=\"note in getStorage()\" :key=\"note.title\">\n                <div class=\"note-block\" :id=\"'note-block' + note.id\" :style=\"'background-color:' + note.backcolor\">\n                    <div class=\"d-flex justify-content-between main\">\n                        <h2><input :id=\"'h2-'+note.id\" v-on:change=\"updateTitle(note.id, 'main')\" :value=\"note.title\"></h2>\n                        <router-link :to=\"'note/' + note.id\">\n                            <svg width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" class=\"bi bi-three-dots\" fill=\"black\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <path fill-rule=\"evenodd\" d=\"M3 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z\"/>\n                            </svg>\n                        </router-link>\n                    </div>  \n                    <div v-for=\"(entry, index) in note.text\" :key=\"index\">\n                        <textarea class=\"note\" :id=\"'textArea'+index\" :value=\"entry\" v-on:change=\"update(note.id, index, 'main')\" v-on:keyup=\"textAreaResize('note-block' + note.id, 'textArea' + index)\"></textarea>\n                        <span v-if=\"loaded\">\n                            {{textAreaResize('note-block' + note.id, 'textArea' + index)}}\n                        </span>\n                    </div>\n                    <button v-on:click=\"addEntry(note.id)\" class=\"btn btn-primary\">Add a new Entry</button>\n                </div>\n                \n                <div v-if=\"$route.params.id == note.id\">\n                    \n                    <Note \n                        :id=\"note.id\"\n                        :title=\"note.title\"\n                        :backcolor=\"note.backcolor\" \n                        :text=\"note.text\"\n                        @update-title=\"updateTitle\"\n                        @update=\"update\"\n                        @text-area-resize=\"textAreaResize\"\n\n                    />\n                </div> \n            </div>\n            <span class=\"d-none\"> {{loaded = false}} </span>\n            <div class=\"add align-self-start mt-3\" v-on:click=\"newNote()\">\n                <div class=\"add-text\">+ Add new note</div>\n            </div>\n        </div>\n</template>\n\n\n\n<style>\n    .list-note {\n        overflow-x: scroll;\n    }\n    .note-block {\n        width: 300px;\n        border: 1px solid #818181;\n        margin: 10px;\n        border-radius: 10px;\n        padding: 10px;\n        opacity: 80%;\n    }\n    .note {\n        margin: 10px 0px;\n        border: 1px solid #818181;\n        border-radius: 10px;\n        padding: 5px;\n        resize: none;\n        overflow: hidden;\n    }\n    .add {\n        cursor: pointer;\n        border: 2px dotted #818181;\n    }\n    .add-text {\n        width: 300px;\n    }\n    h2 input{\n        width: 100%;\n        background-color: transparent;\n        border: none;\n    }\n    h2 {\n        text-align: left;\n    }\n\n</style>"]}]}